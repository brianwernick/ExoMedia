import org.gradle.internal.logging.text.StyledTextOutputFactory
import static org.gradle.internal.logging.text.StyledTextOutput.Style

buildscript {
  ext.kotlinVersion = '1.6.10'
  repositories {
    mavenCentral()
    google()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:7.1.3'
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
  }
}

plugins {
  id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}

ext {
  moduleTestResults = []
  exoPlayerVersion = "2.17.1"
}


allprojects {
  repositories {
    mavenCentral()
    google()
  }

  tasks.withType(Test) {
    testLogging {
      outputs.upToDateWhen { false }
      events "failed", "skipped", "standardOut"
      exceptionFormat "full"

      afterSuite { desc, result ->
        if (!desc.parent) {
          rootProject.moduleTestResults.add([name: project.name, result: result])
        }
      }
    }
  }
}

gradle.buildFinished {
  def testResults = rootProject.ext.moduleTestResults
  def totals = [success: 0, failed: 0, skipped: 0, total: 0]

  testResults.forEach { result ->
    totals.success += result.result.successfulTestCount
    totals.failed += result.result.failedTestCount
    totals.skipped += result.result.skippedTestCount
    totals.total += result.result.testCount

    printTestResults(
        result.name,
        result.result.successfulTestCount,
        result.result.failedTestCount,
        result.result.skippedTestCount,
        result.result.testCount
    )
  }

  if (!testResults.isEmpty()) {
    printTestResults(
        "Project Total",
        totals.success,
        totals.failed,
        totals.skipped,
        totals.total
    )
  }
}

private printTestResults(title, passed, failed, skipped, total) {
  def style = Style.Success
  if (failed > 0) {
    style = Style.Failure
  } else if (skipped > 0) {
    style = Style.Info
  }

  def summary = " ${passed} / ${total} passed, ${failed} failed, ${skipped} skipped "
  def summaryTitle = " ${title.capitalize()} "
  def styledOut = services.get(StyledTextOutputFactory).create("elements-out")

  styledOut.withStyle(style).println('╔═' + summaryTitle + '═' * (summary.length() - summaryTitle.length() -1) + '╗')
  styledOut.withStyle(style).println('║' + summary + '║')
  styledOut.withStyle(style).println('╚' + '═' * summary.length() + '╝')
}


/*
 * Below is the functionality to publish the `library` module to Maven Central (Sonatype) using the
 * plugin `io.github.gradle-nexus.publish-plugin`. This functionality is included in this (root)
 * `build.gradle` because that's what the plugin expects; if this changes in the future then we
 * should migrate this functionality into the `publish.gradle` file instead.
 */
apply from: 'gradle/release/libraryInfo.gradle'

ext {
  libraryInfo = getLibraryInfo()
}

// Used by the publish-plugin
group = libraryInfo.groupId
version = libraryInfo.versionName

nexusPublishing {
  repositories {
    sonatype {
      nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
      snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
      username = System.getenv("SONATYPE_TOKEN_USERNAME")
      password = System.getenv("SONATYPE_TOKEN_PASSWORD")
    }
  }
}